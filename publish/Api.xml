<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Api</name>
    </assembly>
    <members>
        <member name="T:Api.Controllers.HomeController">
            <summary>
            Controller for handling user authentication and protected resources.
            </summary>
        </member>
        <member name="M:Api.Controllers.HomeController.RegisterAsync(Api.Models.RegisterModel)">
             <summary>
             Register a new user.
             </summary>
             <remarks>
             **Route**: `POST /api/home/register`  
             **Purpose**:  
             - Handles user registration.  
             - Validates the model using `ModelState`.  
             - Calls the `RegisterAsync` method from the `IAuthService` to create a new user.  
            
             **Request Body**:  
             A `RegisterModel` instance with the following fields:  
             - `FirstName` (string, required)  
             - `LastName` (string, required)  
             - `Username` (string, required)  
             - `Email` (string, required)  
             - `Password` (string, required)  
             - `Gender` (string, optional)  
             - `Image` (binary, optional)  
            
             **Responses**:  
             - `200 OK`: Registration successful.  
             - `400 Bad Request`: Invalid model or registration failed.  
             </remarks>
        </member>
        <member name="M:Api.Controllers.HomeController.LoginAsync(Api.Models.TokenRequestModel)">
             <summary>
             Log in an existing user.
             </summary>
             <remarks>
             **Route**: `POST /api/home/login`  
             **Purpose**:  
             - Authenticates a user and generates a JWT.  
             - Validates the model using `ModelState`.  
             - Calls the `GetTokenAsync` method from the `IAuthService` to generate a token.  
            
             **Request Body**:  
             A `TokenRequestModel` instance with the following fields:  
             - `Username` (string, required)  
             - `Password` (string, required)  
            
             **Responses**:  
             - `200 OK`: Login successful with authentication token.  
             - `400 Bad Request`: Invalid model or login failed.  
             </remarks>
        </member>
        <member name="M:Api.Controllers.HomeController.AddRoleAsync(Api.Models.AddRoleModel)">
             <summary>
             Assign a role to a user.
             </summary>
             <remarks>
             **Route**: `POST /api/home/addrole`  
             **Purpose**:  
             - Assigns a role to a user.  
             - Validates the model using `ModelState`.  
             - Calls the `AddRoleAsync` method from the `IAuthService` to add a role.  
            
             **Request Body**:  
             An `AddRoleModel` instance with the following fields:  
             - `Username` (string, required)  
             - `Role` (string, required)  
            
             **Responses**:  
             - `200 OK`: Role successfully assigned.  
             - `400 Bad Request`: Invalid model or role assignment failed.  
             </remarks>
        </member>
        <member name="M:Api.Controllers.HomeController.GetProtectedResource">
             <summary>
             Retrieve a protected resource.
             </summary>
             <remarks>
             **Route**: `GET /api/home/protected`  
             **Authorization**: Requires the `User` role (`[Authorize(Roles = "User")]`).  
            
             **Purpose**:  
             - A protected endpoint accessible only to authenticated users with the `User` role.  
            
             **Responses**:  
             - `200 OK`: Protected resource retrieved successfully.  
             - `401 Unauthorized`: User not logged in or does not have the required role.  
             </remarks>
        </member>
        <member name="T:Api.Controllers.UserController">
            <summary>
            Controller for handling user-related operations such as vulnerability scanning and history retrieval.
            </summary>
        </member>
        <member name="M:Api.Controllers.UserController.AutomaticScanner(Api.Models.Website,System.Threading.CancellationToken)">
             <summary>
             Initiates an automatic vulnerability scan for a given website URL.
             </summary>
             <remarks>
             **URL**: `POST /api/scanners/automatic-scanner`  
             **Purpose**:  
             - Initiates an automatic vulnerability scan using ZAP.  
             - Associates the scan with the authenticated user.  
             - Performs a spider crawl followed by an active vulnerability scan.  
             - Saves the scan request and results in the database.  
            
             **Request Body**:  
             A `Website` instance with the following fields:  
             - `Url` (string, required): The website URL to scan.  
            
             **Responses**:  
             - `200 OK`: Scan completed successfully with a redirect URL to view the results.  
             - `400 Bad Request`: Invalid input or malformed URL.  
             - `401 Unauthorized`: User is not authenticated.  
             - `500 Internal Server Error`: Error during the scan process.  
             </remarks>
        </member>
        <member name="M:Api.Controllers.UserController.GetScanResults(System.Int32,System.Threading.CancellationToken)">
             <summary>
             Retrieves the results of a completed scan based on a scan ID.
             </summary>
             <remarks>
             **URL**: `GET /api/scanners/automatic-scanner/scan-results`  
             **Purpose**:  
             - Fetches scan results from ZAP for a given scan ID.  
             - Parses and saves the results in the database if not already present.  
            
             **Query Parameters**:  
             - `scanId` (int, required): The ID of the scan to retrieve results for.  
            
             **Responses**:  
             - `200 OK`: Scan results retrieved successfully, with details of vulnerabilities (if any).  
             - `404 Not Found`: No scan found for the provided ID.  
             - `500 Internal Server Error`: Error while retrieving scan results.  
             </remarks>
        </member>
        <member name="M:Api.Controllers.UserController.GetScanHistory(System.Threading.CancellationToken)">
             <summary>
             Retrieves the scan history of the authenticated user.
             </summary>
             <remarks>
             **URL**: `GET /api/scanners/history`  
             **Purpose**:  
             - Fetches all scans performed by the authenticated user.  
             - Returns details such as the website URL, start time, and ZAP scan ID.  
            
             **Responses**:  
             - `200 OK`: Scan history retrieved successfully.  
             - `401 Unauthorized`: User is not authenticated.  
             </remarks>
        </member>
        <member name="T:Api.Migrations.InitialCreate">
            <inheritdoc />
        </member>
        <member name="M:Api.Migrations.InitialCreate.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Api.Migrations.InitialCreate.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Api.Migrations.InitialCreate.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
        <member name="T:Api.Migrations.SeedRoles">
            <inheritdoc />
        </member>
        <member name="M:Api.Migrations.SeedRoles.Up(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Api.Migrations.SeedRoles.Down(Microsoft.EntityFrameworkCore.Migrations.MigrationBuilder)">
            <inheritdoc />
        </member>
        <member name="M:Api.Migrations.SeedRoles.BuildTargetModel(Microsoft.EntityFrameworkCore.ModelBuilder)">
            <inheritdoc />
        </member>
    </members>
</doc>
